% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_data.R
\name{get_info}
\alias{get_info}
\alias{get_daily_quotes}
\alias{get_prices_am}
\alias{get_trades_spec}
\alias{get_weekly_margin_interest}
\alias{get_short_selling}
\alias{get_breakdown}
\alias{get_trading_calendar}
\alias{get_topix}
\alias{get_financial_statements}
\alias{get_financial_details}
\alias{get_financial_dividend}
\alias{get_financial_announcement}
\alias{get_index_option}
\title{Get data from J-Quants API}
\usage{
get_info(code, date, id_token = Sys.getenv("JQUANTSR_ID_TOKEN"))

get_daily_quotes(
  code,
  from,
  to,
  date,
  id_token = Sys.getenv("JQUANTSR_ID_TOKEN")
)

get_prices_am(code, id_token = Sys.getenv("JQUANTSR_ID_TOKEN"))

get_trades_spec(section, from, to, id_token = Sys.getenv("JQUANTSR_ID_TOKEN"))

get_weekly_margin_interest(
  code,
  from,
  to,
  date,
  id_token = Sys.getenv("JQUANTSR_ID_TOKEN")
)

get_short_selling(
  sector33code,
  from,
  to,
  date,
  id_token = Sys.getenv("JQUANTSR_ID_TOKEN")
)

get_breakdown(code, from, to, date, id_token = Sys.getenv("JQUANTSR_ID_TOKEN"))

get_trading_calendar(
  holidaydivision,
  from,
  to,
  id_token = Sys.getenv("JQUANTSR_ID_TOKEN")
)

get_topix(from, to, id_token = Sys.getenv("JQUANTSR_ID_TOKEN"))

get_financial_statements(
  code,
  date,
  id_token = Sys.getenv("JQUANTSR_ID_TOKEN")
)

get_financial_details(code, date, id_token = Sys.getenv("JQUANTSR_ID_TOKEN"))

get_financial_dividend(
  code,
  from,
  to,
  date,
  id_token = Sys.getenv("JQUANTSR_ID_TOKEN")
)

get_financial_announcement(id_token = Sys.getenv("JQUANTSR_ID_TOKEN"))

get_index_option(date = date, id_token = Sys.getenv("JQUANTSR_ID_TOKEN"))
}
\arguments{
\item{code}{a string stock code.}

\item{date}{a string the date of data. "\%Y\%m\%d" and "\%Y-\%m-\%d" formats are valid.}

\item{id_token}{a string your id_token.}

\item{from}{a string the start date of data. "\%Y\%m\%d" and "\%Y-\%m-\%d" formats are valid.}

\item{to}{a string the end date of data. "\%Y\%m\%d" and "\%Y-\%m-\%d" formats are valid.}
}
\value{
if successfully fetched data (= status code of the API is 200), a tibble of the fetched data.
if not successfully (= status code of the API is not 200), message from the API is printed.
}
\description{
Get data from J-Quants API.

When you have run "authorize()", you don't need to set "id_token" parameter,
because "authorize()" set your ID token in a environment variable named "JQUANTSR_ID_TOKEN".
}
\details{
parameter "code", "from", "to", "date" are required as follows.
\itemize{
  \item{"get_info()"}: {Both of "code" and "date" are optional.}
  \item{"get_daily_quotes()"}: {At least one of "code" and "date" are mandatory. If "from" and "to" parameters are used, "code" is mandatory.}
  \item{"get_topix()"}: {Both of "from" and "to" are optional.}
  \item{"get_financial_annoucements()"}: {At least one of "code" and "date" are mandatory.}
}
For more information, see \href{https://jpx.gitbook.io/j-quants-ja/api-reference}{J-Quants API reference}.
}
\examples{
\dontrun{
# you must have done "authorize()" before running "get_info" or other functions,
authorize(refresh_token = YOUR_REFRESH_TOKEN)

get_info()
get_info(code = "86970")
get_info(date = "20220701")
get_info(code = "86970", date = "20220701")

get_daily_quotes(code = "86970")
get_daily_quotes(date = "20220701")
get_daily_quotes(code = "86970", from = "20220101", to = "20220630")

get_prices_am()
get_prices_am(code = "86970")

get_trades_spec(section = "TSEPrime")
get_trades_spec(from = "20220101", to = "20220630")
get_trades_spec(section = "TSEPrime", from = "20220101", to = "20220630")

get_weekly_margin_interest(code = "86970")
get_weekly_margin_interest(date = "20220701")
get_weekly_margin_interest(code = "86970", from = "20220101", to = "20220630")

get_short_selling(sector33code = "0050")
get_short_selling(date = "20220701")
get_short_selling(sector33code = "0050", from = "20220101", to = "20220630")

get_breakdown(code = "86970")
get_breakdown(date = "20220701")
get_breakdown(code = "86970", from = "20220101", to = "20220630")

get_trading_calendar()
get_trading_calendar(holidaydivision = "1")
get_trading_calendar(holidaydivision = "1", from = "20220101")
get_trading_calendar(holidaydivision = "1", to = "20220630")
get_trading_calendar(holidaydivision = "1", from = "20220101", to = "20220630")
get_trading_calendar(from = "20220101", to = "20220630")

get_topix()
get_topix(from = "20220101")
get_topix(to = "20220630")
get_topix(from = "20220101", to = "20220630")

get_financial_statements(code = "86970")
get_financial_statements(date = "20220105")
get_financial_statements(code = "86970", date = "20220105")

get_financial_details(code = "86970")
get_financial_details(date = "20220127")
get_financial_details(code = "86970", date = "20220127")

get_financial_dividend(code = "86970")
get_financial_dividend(date = "20220701")
get_financial_dividend(code = "86970", from = "20220101", to = "20220630")

get_financial_announcement()

get_index_option(date = "20220701")
}
}
